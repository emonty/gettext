@example
msgfmt [@var{option}] @var{filename}.po @dots{}
@end example

The @code{msgfmt} programs generates a binary message catalog from a textual
translation description.

@subsection Input file location

@table @samp
@item @var{filename}.po @dots{}

@item -D @var{directory}
@itemx --directory=@var{directory}
Add @var{directory} to the list of directories.  Source files are
searched relative to this list of directories.  The resulting @file{.po}
file will be written relative to the current directory, though.

@end table

If an input file is @samp{-}, standard input is read.

@subsection Operation mode

@table @samp
@item -j
@itemx --java
Java mode: generate a Java @code{ResourceBundle} class.

@item --java2
Like --java, and assume Java2 (JDK 1.2 or higher).

@end table

@subsection Output file location

@table @samp
@item -o @var{file}
@itemx --output-file=@var{file}
Write output to specified file.

@item --strict
Direct the program to work strictly following the Uniforum/Sun
implementation.  Currently this only affects the naming of the output
file.  If this option is not given the name of the output file is the
same as the domain name.  If the strict Uniforum mode is enabled the
suffix @file{.mo} is added to the file name if it is not already
present.

We find this behaviour of Sun's implementation rather silly and so by
default this mode is @emph{not} selected.

@end table

If the output @var{file} is @samp{-}, output is written to standard output.

@subsection Output file location in Java mode

@table @samp
@item -r @var{resource}
@itemx --resource=@var{resource}
Specify the resource name.

@item -l @var{locale}
@itemx --locale=@var{locale}
Specify the locale name, either a language specification of the form @var{ll}
or a combined language and country specification of the form @var{ll_CC}.

@item -d @var{directory}
Specify the base directory of classes directory hierarchy.

@end table

The class name is determined by appending the locale name to the resource name,
separated with an underscore.  The @samp{-d} option is mandatory.  The class
is written under the specified directory.

@subsection Input file interpretation

@table @samp
@item -c
@itemx --check
Perform all the checks implied by @code{--check-format}, @code{--check-header},
@code{--check-domain}.

@item --check-format
Check language dependent format strings.

If the string represents a format string used in a
@code{printf}-like function both strings should have the same number of
@samp{%} format specifiers, with matching types.  If the flag
@code{c-format} or @code{possible-c-format} appears in the special
comment @key{#,} for this entry a check is performed.  For example, the
check will diagnose using @samp{%.*s} against @samp{%s}, or @samp{%d}
against @samp{%s}, or @samp{%d} against @samp{%x}.  It can even handle
positional parameters.

Normally the @code{xgettext} program automatically decides whether a
string is a format string or not.  This algorithm is not perfect,
though.  It might regard a string as a format string though it is not
used in a @code{printf}-like function and so @code{msgfmt} might report
errors where there are none.

To solve this problem the programmer can dictate the decision to the
@code{xgettext} program (@pxref{c-format}).  The translator should not
consider removing the flag from the @key{#,} line.  This "fix" would be
reversed again as soon as @code{msgmerge} is called the next time.

@item --check-header
Verify presence and contents of the header entry.  @xref{Header Entry},
for a description of the various fields in the header entry.

@item --check-domain
Check for conflicts between domain directives and the @code{--output-file}
option

@item -C
@itemx --check-compatibility
Check that GNU msgfmt behaves like X/Open msgfmt.  This will give an error
when attempting to use the GNU extensions.

@item -f
@itemx --use-fuzzy
Use fuzzy entries in output.  Note that using this option is usually wrong,
because fuzzy messages are exactly those which have not been validated by
a human translator.

@end table

@subsection Output details

@table @samp
@item -a @var{number}
@itemx --alignment=@var{number}
Align strings to @var{number} bytes (default: 1).
@c Currently the README mentions that this constant could be changed by
@c the installer by changing the value in config.h.  Should this go away?

@item --no-hash
Don't include a hash table in the binary file.  Lookup will be more expensive
at run time (binary search instead of hash table lookup).

@end table

@subsection Informative output

@table @samp
@item -h
@itemx --help
Display this help and exit.

@item -V
@itemx --version
Output version information and exit.

@item --statistics
Print statistics about translations.

@item -v
@itemx --verbose
Increase verbosity level.

@end table
