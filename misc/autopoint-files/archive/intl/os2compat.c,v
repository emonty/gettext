head	1.1;
branch	1.1.1;
access;
symbols
	gettext-0_11_2:1.1.1.3
	gettext-0_11_1:1.1.1.2
	gettext-0_11:1.1.1.1
	release:1.1.1;
locks; strict;
comment	@ * @;


1.1
date	2002.05.01.17.56.22;	author bruno;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2002.05.01.17.56.22;	author bruno;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2002.05.01.18.02.35;	author bruno;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2002.05.01.18.06.29;	author bruno;	state Exp;
branches;
next	;


desc
@@


1.1
log
@Initial revision
@
text
@/* OS/2 compatibility functions.
   Copyright (C) 2001-2002 Free Software Foundation, Inc.

   This program is free software; you can redistribute it and/or modify it
   under the terms of the GNU Library General Public License as published
   by the Free Software Foundation; either version 2, or (at your option)
   any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
   Library General Public License for more details.

   You should have received a copy of the GNU Library General Public
   License along with this program; if not, write to the Free Software
   Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307,
   USA.  */

#define OS2_AWARE
#ifdef HAVE_CONFIG_H
#include <config.h>
#endif

#include <stdlib.h>
#include <string.h>

/* A version of getenv() that works from DLLs */
extern unsigned long DosScanEnv (const unsigned char *pszName, unsigned char **ppszValue);

char *
_nl_getenv (const char *name)
{
  unsigned char *value;
  if (DosScanEnv (name, &value))
    return NULL;
  else
    return value;
}

char _nl_default_dirname[] =	/* a 260+1 bytes large buffer */
  "\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0"
  "\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0"
  "\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0"
  "\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0"
  "\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0"
  "\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0"
  "\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0"
  "\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0"
  "\0\0\0\0"
#define LOCALEDIR_MAX 260

char *_os2_libdir = NULL;
char *_os2_localealiaspath = NULL;
char *_os2_localedir = NULL;

static __attribute__((constructor)) void
os2_initialize ()
{
  char *root = getenv ("UNIXROOT");
  char *gnulocaledir = getenv ("GNULOCALEDIR");

  _os2_libdir = gnulocaledir;
  if (!_os2_libdir)
    {
      if (root)
        {
          size_t sl = strlen (root);
          _os2_libdir = (char *) malloc (sl + strlen (LIBDIR) + 1);
          memcpy (_os2_libdir, root, sl);
          memcpy (_os2_libdir + sl, LIBDIR, strlen (LIBDIR) + 1);
        }
      else
        _os2_libdir = LIBDIR;
    }

  _os2_localealiaspath = gnulocaledir;
  if (!_os2_localealiaspath)
    {
      if (root)
        {
          size_t sl = strlen (root);
          _os2_localealiaspath = (char *) malloc (sl + strlen (LOCALE_ALIAS_PATH) + 1);
          memcpy (_os2_localealiaspath, root, sl);
          memcpy (_os2_localealiaspath + sl, LOCALE_ALIAS_PATH, strlen (LOCALE_ALIAS_PATH) + 1);
        }
     else
        _os2_localealiaspath = LOCALE_ALIAS_PATH;
    }

  _os2_localedir = gnulocaledir;
  if (!_os2_localedir)
    {
      if (root)
        {
          size_t sl = strlen (root);
          _os2_localedir = (char *) malloc (sl + strlen (LOCALEDIR) + 1);
          memcpy (_os2_localedir, root, sl);
          memcpy (_os2_localedir + sl, LOCALEDIR, strlen (LOCALEDIR) + 1);
        }
      else
        _os2_localedir = LOCALEDIR;
    }

  {
    extern const char _nl_default_dirname__[];
    if (strlen (_os2_localedir) <= LOCALEDIR_MAX)
      strcpy (_nl_default_dirname__, _os2_localedir);
  }
}
@


1.1.1.1
log
@Import gettext-0.11
@
text
@@


1.1.1.2
log
@Import gettext-0.11.1
@
text
@d40 10
a49 1
/* A fixed size buffer.  */
a50 1
char _nl_default_dirname__[LOCALEDIR_MAX+1];
@


1.1.1.3
log
@Import gettext-0.11.2
@
text
@a25 1
#include <sys/param.h>
d41 2
a42 1
char _nl_default_dirname__[MAXPATHLEN+1];
d44 3
a46 3
char *_nlos2_libdir = NULL;
char *_nlos2_localealiaspath = NULL;
char *_nlos2_localedir = NULL;
d49 1
a49 1
nlos2_initialize ()
d54 2
a55 2
  _nlos2_libdir = gnulocaledir;
  if (!_nlos2_libdir)
d60 3
a62 3
          _nlos2_libdir = (char *) malloc (sl + strlen (LIBDIR) + 1);
          memcpy (_nlos2_libdir, root, sl);
          memcpy (_nlos2_libdir + sl, LIBDIR, strlen (LIBDIR) + 1);
d65 1
a65 1
        _nlos2_libdir = LIBDIR;
d68 2
a69 2
  _nlos2_localealiaspath = gnulocaledir;
  if (!_nlos2_localealiaspath)
d74 3
a76 3
          _nlos2_localealiaspath = (char *) malloc (sl + strlen (LOCALE_ALIAS_PATH) + 1);
          memcpy (_nlos2_localealiaspath, root, sl);
          memcpy (_nlos2_localealiaspath + sl, LOCALE_ALIAS_PATH, strlen (LOCALE_ALIAS_PATH) + 1);
d79 1
a79 1
        _nlos2_localealiaspath = LOCALE_ALIAS_PATH;
d82 2
a83 2
  _nlos2_localedir = gnulocaledir;
  if (!_nlos2_localedir)
d88 3
a90 3
          _nlos2_localedir = (char *) malloc (sl + strlen (LOCALEDIR) + 1);
          memcpy (_nlos2_localedir, root, sl);
          memcpy (_nlos2_localedir + sl, LOCALEDIR, strlen (LOCALEDIR) + 1);
d93 1
a93 1
        _nlos2_localedir = LOCALEDIR;
d96 5
a100 2
  if (strlen (_nlos2_localedir) <= MAXPATHLEN)
    strcpy (_nl_default_dirname__, _nlos2_localedir);
@


